---
description: Lingui Internationalization Guidelines
globs: ['src/**/*.tsx', 'src/**/*.ts']
alwaysApply: true
---

# Lingui Internationalization Best Practices

Comprehensive guidelines for implementing robust internationalization in React Native using @lingui for seamless multilingual support.

## Core Principles

- **Zero Hardcoded Strings**: ALL user-facing text must use Lingui
- **Correct Imports**: Use `@lingui/core/macro` for t macro, `@lingui/react/macro` for Trans/Plural/Select
- **No @lingui/macro**: Never import from deprecated `@lingui/macro` package
- **Type Safety**: Leverage TypeScript for translation keys and parameters
- **Performance First**: Use compile-time optimizations for minimal runtime overhead
- **Context Awareness**: Provide meaningful context for translators
- **Accessibility**: Ensure translations support screen readers and accessibility features

## Supported Languages

- **Primary**: English (en) - default locale
- **Secondary**: Spanish (es) - full localization support
- **Future**: Extensible architecture for additional languages

## Lingui API Usage

### Import Guidelines

- Use `Trans`, `Plural`, `Select` from `@lingui/react/macro` for JSX components
- Use `t` macro from `@lingui/core/macro` for string values
- Use `useLingui` hook from `@lingui/react` to access i18n instance
- Never import from deprecated `@lingui/macro` package

### Text Content Patterns

#### Simple Text with Trans Component

- Use Trans component for JSX text content
- Provide context for translators when terms are ambiguous
- Support nested JSX elements within Trans components

#### Dynamic Text with t Macro

- Use t macro for string values and placeholders
- Always use useLingui hook to access the `_` function
- Provide fallback values for dynamic content

#### Complex Messages with Variables

- Use Trans component with embedded variables in JSX
- Use Plural component for count-based messages
- Support ICU message format for complex formatting

#### Contextual Translations

- Provide context for ambiguous terms (navigation vs food menu)
- Use context for different UI states (primary vs secondary buttons)
- Include meaningful context comments for translators

#### ICU Message Format Support

- Use ICU format for complex pluralization rules
- Support date and time formatting with ICU
- Handle currency and number formatting appropriately

#### Conditional Messages

- Use Select component for gender-aware messages
- Handle conditional content based on user attributes
- Provide fallback options for unknown values

## File Organization & Structure

### Translation Files Structure

- Organize translations in `src/lib/locales/` directory
- Separate translations by feature (common, menu, errors)
- Use `.po` files for each locale
- Maintain consistent file naming across locales

### Message Extraction Workflow

- Use `bun run lingui:extract` to extract translatable strings
- Use `bun run lingui:compile` to compile translations for production
- Run extraction and compilation together in development workflow

## Translation Categories

### Common UI Elements

- Navigation labels and buttons
- Form labels and placeholders
- Loading and error states
- Confirmation dialogs
- Status messages

### Menu Content

- Category names and descriptions
- Item names and descriptions
- Pricing and availability
- Dietary information and allergens

### Store Information

- Location and address details
- Operating hours and schedules
- Contact information
- Store policies and notices

### Error Handling

- Network error messages
- Validation error messages
- System error messages
- User-friendly fallback messages

### Accessibility Labels

- Screen reader descriptions
- Button accessibility labels
- Image alt text
- Form field descriptions

## Best Practices

### Message ID Management

- Use descriptive IDs for complex messages
- Prefer auto-generated IDs for simple messages
- Include context in ID structure when helpful
- Avoid changing IDs once translations are complete

### Variable Handling

- Always provide fallback values for dynamic content
- Use proper TypeScript typing for variables
- Handle undefined/null values gracefully
- Format variables appropriately for locale

### Performance Optimization

- Preload translations for critical paths
- Use compiled catalogs in production
- Load translations before component mounts
- Cache translations efficiently

### Context for Translators

- Provide helpful context comments
- Explain variables and their expected format
- Include usage context for UI elements
- Document any special formatting requirements

## Platform-Specific Considerations

### iOS Localization

- Support RTL languages properly
- Handle dynamic text sizing
- Implement proper VoiceOver support
- Consider iOS-specific date/time formats

### Android Localization

- Handle system language changes
- Support TalkBack accessibility
- Consider Android-specific formatting
- Handle different screen densities

### Web Compatibility

- Ensure proper HTML lang attributes
- Support browser language detection
- Handle SEO requirements for multilingual content
- Implement proper meta tag localization

## Quality Assurance

### Translation Validation

- Validate required translations exist
- Use type-safe translation keys
- Check for missing translations in development
- Implement fallback strategies

### Testing Strategies

- **Unit Tests**: Test translation key extraction
- **Integration Tests**: Verify language switching
- **Visual Tests**: Screenshot testing for different locales
- **Accessibility Tests**: Screen reader testing in multiple languages

### Pseudo-localization

- Enable pseudo-localization for testing
- Test UI layout with longer text
- Verify text expansion handling
- Check for hardcoded strings

## Error Handling

### Missing Translations

- Set up proper missing translation handlers
- Log missing translations in development
- Provide meaningful fallbacks
- Return translation key as last resort

### Fallback Strategies

- Implement language fallback chains
- Handle graceful degradation for missing translations
- Provide English as ultimate fallback
- Cache fallback results for performance

## Integration with App Features

### Dynamic Language Switching

- Load new catalogs asynchronously
- Update i18n instance properly
- Persist user language preference
- Update app state consistently

### User Preferences

- Detect system language on first launch
- Validate supported locales
- Handle unsupported language gracefully
- Store user preference persistently

### SEO and Metadata

- Use proper lang attributes for web
- Localize meta tags and descriptions
- Handle dynamic title updates
- Support search engine indexing

This comprehensive Lingui configuration ensures robust internationalization that scales with your app while maintaining excellent user experience across all supported languages.
