---
description: Lingui Internationalization Guidelines
globs: ['src/**/*.tsx', 'src/**/*.ts']
alwaysApply: true
---

# Lingui Internationalization Best Practices

Comprehensive guidelines for implementing robust internationalization in React Native using @lingui for seamless multilingual support.

## Core Principles

- **Zero Hardcoded Strings**: ALL user-facing text must use Lingui
- **Correct Imports**: Use `@lingui/core/macro` for t macro, `@lingui/react/macro` for Trans/Plural/Select
- **No @lingui/macro**: Never import from deprecated `@lingui/macro` package
- **Type Safety**: Leverage TypeScript for translation keys and parameters
- **Performance First**: Use compile-time optimizations for minimal runtime overhead
- **Context Awareness**: Provide meaningful context for translators
- **Accessibility**: Ensure translations support screen readers and accessibility features

## Supported Languages

- **Primary**: English (en) - default locale
- **Secondary**: Spanish (es) - full localization support
- **Future**: Extensible architecture for additional languages

## Lingui API Usage

### Text Content Patterns

#### Simple Text with Trans Component
```typescript
import { Trans } from '@lingui/react/macro';

// For JSX text content
<Trans>Welcome to TOLO</Trans>

// With context for translators
<Trans context="greeting">Welcome to TOLO</Trans>
```

#### Dynamic Text with t Macro
```typescript
import { t } from '@lingui/core/macro';
import { useLingui } from '@lingui/react';

function Component() {
  const { _ } = useLingui();
  
  // For string values and variables
  const welcomeText = _(t`Welcome to TOLO`);
  
  // With variables
  const greetingText = _(t`Hello, ${userName}!`);
  
  return <Text>{welcomeText}</Text>;
}
```

#### Complex Messages with Variables
```typescript
import { Trans, Plural } from '@lingui/react/macro';

// With variables in JSX
<Trans>
  Welcome back, <Text style={styles.username}>{userName}</Text>!
</Trans>

// With pluralization
<Plural
  value={itemCount}
  one="# item in cart"
  other="# items in cart"
/>
```

### Advanced Patterns

#### Contextual Translations
```typescript
// Provide context for ambiguous terms
<Trans context="navigation">Menu</Trans>  // Navigation menu
<Trans context="food">Menu</Trans>       // Food menu

// Context for different UI states
<Trans context="button.primary">Save</Trans>
<Trans context="button.secondary">Cancel</Trans>
```

#### ICU Message Format Support
```typescript
// Complex formatting with ICU
<Trans>
  {customerName} ordered {itemCount, plural, 
    one {# coffee} 
    other {# coffees}
  } for {totalPrice, number, currency}
</Trans>

// Date and time formatting
<Trans>
  Order placed on {orderDate, date, long} at {orderTime, time, short}
</Trans>
```

#### Conditional Messages
```typescript
import { Select } from '@lingui/react/macro';

// Gender-aware messages
<Select
  value={userGender}
  male="He ordered a coffee"
  female="She ordered a coffee"
  other="They ordered a coffee"
/>
```

## File Organization & Structure

### Translation Files Structure
```
src/
  locales/
    en/
      messages.po     # Main translations
      common.po       # Common UI elements
      menu.po         # Menu-specific translations
      errors.po       # Error messages
    es/
      messages.po
      common.po
      menu.po
      errors.po
```

### Message Extraction Workflow
```bash
# Extract all translatable strings
bun run lingui:extract

# Compile translations for production
bun run lingui:compile

# Development workflow
bun run lingui:extract && bun run lingui:compile
```

## Translation Categories

### Common UI Elements
- Navigation labels and buttons
- Form labels and placeholders
- Loading and error states
- Confirmation dialogs
- Status messages

### Menu Content
- Category names and descriptions
- Item names and descriptions
- Pricing and availability
- Dietary information and allergens

### Store Information
- Location and address details
- Operating hours and schedules
- Contact information
- Store policies and notices

### Error Handling
- Network error messages
- Validation error messages
- System error messages
- User-friendly fallback messages

### Accessibility Labels
- Screen reader descriptions
- Button accessibility labels
- Image alt text
- Form field descriptions

## Best Practices

### Message ID Management
```typescript
// Use descriptive IDs for complex messages
<Trans id="menu.item.description.with.allergens">
  {itemName} - {description} (Contains: {allergens})
</Trans>

// Auto-generated IDs for simple messages (preferred)
<Trans>Add to cart</Trans>  // Auto-generates ID
```

### Variable Handling
```typescript
// Always provide fallback values
const itemName = item?.name || _(t`Unknown item`);

// Use proper typing for variables
interface TranslationProps {
  userName: string;
  itemCount: number;
  totalPrice: number;
}

<Trans>
  Hello {userName}, you have {itemCount} items totaling ${totalPrice}
</Trans>
```

### Performance Optimization
```typescript
// Preload translations for critical paths
import { loadCatalog } from '@lingui/core';

// Load translations before component mounts
useEffect(() => {
  loadCatalog('es');
}, []);

// Use compiled catalogs in production
import { messages as enMessages } from '../locales/en/messages';
import { messages as esMessages } from '../locales/es/messages';
```

### Context for Translators
```typescript
// Provide helpful context comments
<Trans 
  comment="Button text for adding item to shopping cart"
  context="ecommerce.cart"
>
  Add to cart
</Trans>

// Explain variables and their format
<Trans 
  comment="Price format: ${amount} where amount is currency value"
>
  Total: ${totalAmount}
</Trans>
```

## Platform-Specific Considerations

### iOS Localization
- Support RTL languages properly
- Handle dynamic text sizing
- Implement proper VoiceOver support
- Consider iOS-specific date/time formats

### Android Localization
- Handle system language changes
- Support TalkBack accessibility
- Consider Android-specific formatting
- Handle different screen densities

### Web Compatibility
- Ensure proper HTML lang attributes
- Support browser language detection
- Handle SEO requirements for multilingual content

## Quality Assurance

### Translation Validation
```typescript
// Validate required translations exist
const requiredKeys = ['menu.title', 'store.hours', 'contact.phone'];
const missingTranslations = validateTranslations(requiredKeys);

// Type-safe translation keys
type TranslationKey = 'menu.title' | 'store.hours' | 'contact.phone';
```

### Testing Strategies
- **Unit Tests**: Test translation key extraction
- **Integration Tests**: Verify language switching
- **Visual Tests**: Screenshot testing for different locales
- **Accessibility Tests**: Screen reader testing in multiple languages

### Pseudo-localization
```typescript
// Enable pseudo-localization for testing
const pseudoMessages = {
  'Welcome': '[!!! Wélçömé !!!]',
  'Menu': '[!!! Ménü !!!]'
};
```

## Error Handling

### Missing Translations
```typescript
import { setupI18n } from '@lingui/core';

const i18n = setupI18n({
  locale: 'en',
  missing: (locale, id) => {
    // Log missing translations in development
    if (__DEV__) {
      console.warn(`Missing translation for ${id} in ${locale}`);
    }
    // Return fallback or key
    return id;
  }
});
```

### Fallback Strategies
```typescript
// Language fallback chain
const fallbackLocales = {
  'es': ['en'],
  'pt': ['es', 'en']
};

// Graceful degradation for missing translations
const getText = (key: string) => {
  return translations[currentLocale]?.[key] || 
         translations['en']?.[key] || 
         key;
};
```

## Integration with App Features

### Dynamic Language Switching
```typescript
import { i18n } from '@lingui/core';

const switchLanguage = async (locale: string) => {
  // Load new catalog
  await loadCatalog(locale);
  
  // Update i18n instance
  i18n.activate(locale);
  
  // Persist user preference
  await AsyncStorage.setItem('user-locale', locale);
  
  // Update app state
  setCurrentLocale(locale);
};
```

### User Preferences
```typescript
// Detect system language
import * as Localization from 'expo-localization';

const systemLocale = Localization.locale.split('-')[0];
const supportedLocale = ['en', 'es'].includes(systemLocale) 
  ? systemLocale 
  : 'en';
```

### SEO and Metadata
```typescript
import { t } from '@lingui/core/macro';
import { useLingui } from '@lingui/react';

// Dynamic meta tags for web
function MetaTags() {
  const { _ } = useLingui();
  
  return (
    <Head>
      <title>{_(t`TOLO - Buen Café`)}</title>
      <meta name="description" content={_(t`Your neighborhood coffee shop`)} />
      <html lang={currentLocale} />
    </Head>
  );
}
```

This comprehensive Lingui configuration ensures robust internationalization that scales with your app while maintaining excellent user experience across all supported languages.
