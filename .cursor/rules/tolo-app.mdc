---
description: TOLO Coffee Shop App Standards
globs: ['src/**/*.tsx', 'src/**/*.ts']
alwaysApply: true
---

# TOLO Coffee Shop App

Modern React Native coffee shop app with focus on simplicity, performance, and exceptional user experience.

## Project Overview

- **Purpose**: Coffee shop app for browsing menu, store info, and contact details
- **Stack**: React Native, Expo, TypeScript, React Native Unistyles, Lingui, TanStack Query
- **Architecture**: File-based routing with Expo Router, functional components, modern React patterns
- **Deployment**: EAS Build with OTA updates using fingerprint runtime policy

## Core Features

- Menu browsing with intuitive categories
- Store location, hours, and contact information
- Multi-language support (English/Spanish)
- Offline-first architecture with smart caching
- Silent OTA updates with fingerprint runtime policy (no UI interruption)
- Edge-to-edge design with proper safe area handling
- Accessibility-first approach

## Design Philosophy

- **Clean & Modern**: Minimalist UI with focus on content
- **Performance First**: Fast loading, smooth animations, optimized rendering
- **Accessible Design**: Screen reader support, proper contrast, scalable text
- **Consistent Experience**: Uniform spacing, typography, and interaction patterns
- **Mobile Optimized**: Touch-friendly interface with proper gesture handling

## Technical Standards

### Core Technologies
- **Styling**: React Native Unistyles for ALL styling (never inline styles)
- **Internationalization**: Lingui for ALL user-facing text (never hardcoded strings)
- **Type Safety**: TypeScript with strict mode enabled
- **State Management**: TanStack Query for server state, React Context for client state
- **Navigation**: Expo Router with typed routes
- **Package Manager**: bun (never npm or yarn)
- **React Imports**: Never import React default - import specific APIs only

### File Naming Conventions
- **ALL files**: kebab-case naming (e.g., `language-context.tsx`, `use-color-scheme.ts`)
- **Components**: PascalCase exports from kebab-case files
- **Hooks**: camelCase exports starting with 'use' from kebab-case files
- **Utilities**: camelCase exports from kebab-case files

### Code Organization
- **Feature-based structure**: Group related components, hooks, and utilities
- **Barrel exports**: Use index files for clean imports
- **Single responsibility**: Each file should have one primary purpose
- **Separation of concerns**: Logic, UI, and styling clearly separated

### Development Workflow Standards

#### Package Management
- **ALWAYS use bun**: Never npm or yarn for dependency installation
- **Install bun first**: If bun not available, run `npm install -g bun` before proceeding
- **Dependency installation**: ALWAYS use `bun install` or `bun add <package>` for installing dependencies
- **Update dependencies**: Run `bun install` after any dependency changes
- **Verify compatibility**: Run `bunx expo install --fix` after React Native deps
- **Format code**: Run `bun run format` after completing tasks
- **Lint check**: Run `bun run lint` and fix errors after completing tasks

#### Error Handling & Monitoring
- **Sentry Integration**: Capture all errors with proper context
- **Graceful Degradation**: App should handle network failures elegantly
- **User Feedback**: Provide clear, actionable error messages
- **Logging**: Include relevant context for debugging

### Performance Requirements

#### Rendering Optimization
- **Memoization**: Use React.memo for expensive components
- **Virtualization**: FlatList for any lists with >10 items
- **Code Splitting**: Lazy load non-critical screens
- **Image Optimization**: Use Expo Image with proper sizing and formats

#### Bundle Optimization
- **Tree Shaking**: Ensure unused code is eliminated
- **Dynamic Imports**: Load features on demand
- **Asset Optimization**: Compress images and use appropriate formats

#### Runtime Performance
- **60fps Target**: Maintain smooth animations and scrolling
- **Memory Management**: Avoid memory leaks in subscriptions and timers
- **Battery Efficiency**: Minimize background processing

### Quality Assurance

#### Code Quality
- **TypeScript Strict**: No `any` types, proper interfaces
- **ESLint**: Follow configured rules without exceptions
- **Prettier**: Consistent code formatting
- **KISS Principle**: Keep implementations simple and straightforward

#### Testing Strategy
- **Unit Tests**: Critical business logic and utilities
- **Integration Tests**: User flows and component interactions
- **Accessibility Tests**: Screen reader and keyboard navigation
- **Performance Tests**: Bundle size and runtime performance

#### Code Review Standards
- **Self Review**: Check your own code before submission
- **Documentation**: JSDoc for complex functions only (avoid trivial docs)
- **Commit Messages**: Follow Conventional Commits v1.0.0 specification
- **PR Size**: Keep changes focused and reviewable

### Accessibility Standards

#### Screen Reader Support
- **Accessibility Labels**: Meaningful labels for all interactive elements
- **Semantic Structure**: Proper heading hierarchy and landmarks
- **Focus Management**: Logical tab order and focus indicators
- **Announcements**: Important state changes communicated to users

#### Visual Accessibility
- **Color Contrast**: WCAG AA compliance minimum
- **Text Scaling**: Support for dynamic text sizing
- **Touch Targets**: Minimum 44pt touch targets
- **Visual Indicators**: Don't rely solely on color for information

### Platform Considerations

#### iOS Specific
- **Safe Areas**: Proper handling of notches and home indicators
- **Haptic Feedback**: Appropriate use of system haptics
- **iOS Design Patterns**: Follow platform conventions

#### Android Specific
- **Edge-to-Edge**: Proper handling of system bars
- **Material Design**: Follow Android design principles
- **Back Button**: Proper back navigation handling

#### Web (if applicable)
- **Responsive Design**: Adapt to different screen sizes
- **Keyboard Navigation**: Full keyboard accessibility
- **SEO Optimization**: Proper meta tags and structure

## AI Assistant Guidelines

### Development Efficiency
- **Focused Responses**: Avoid verbose summaries unless requested
- **Minimal Changes**: Only implement what's specifically requested
- **Context Awareness**: Understand existing patterns before suggesting changes
- **Token Efficiency**: Provide concise, actionable guidance

### Code Generation Preferences
- **Follow Patterns**: Respect existing codebase patterns and conventions
- **Modern Practices**: Use current React Native and Expo best practices
- **Type Safety**: Always include proper TypeScript types
- **Performance Minded**: Consider performance implications of suggestions
- **Correct Imports**: Never import React default, use specific API imports only

### Documentation Standards
- **Minimal JSDoc**: Only document complex or non-obvious functions
- **Self-Documenting Code**: Prefer clear naming over extensive comments
- **README Updates**: Keep project documentation current
- **API Documentation**: Document public interfaces and hooks

## Common Patterns

### Import Patterns
- **React Hooks**: `import { useState, useEffect, useCallback } from 'react'`
- **React Native**: `import { View, Text, Pressable } from 'react-native'`
- **Lingui**: `import { Trans } from '@lingui/react/macro'` and `import { t } from '@lingui/core/macro'`
- **Never**: `import React from 'react'` (not needed in modern React Native)

### Component Structure
- Use functional components with TypeScript interfaces
- Import specific React hooks as needed
- Export components with PascalCase names from kebab-case files

### Hook Pattern
- Import specific hooks from React
- Create custom hooks with clear return interfaces
- Use proper dependency arrays

### Error Handling Pattern
- Log errors to Sentry with proper context
- Provide user-friendly feedback
- Implement graceful fallbacks

This configuration ensures consistent, high-quality development while maintaining the simplicity and performance focus that defines the TOLO coffee shop experience.
