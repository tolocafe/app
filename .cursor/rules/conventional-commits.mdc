# Conventional Commits Guidelines

Follow the Conventional Commits v1.0.0 specification for consistent, meaningful commit messages that enable automated tooling and clear project history.

## Commit Message Structure

```
<type>[optional scope]: <description>

[optional body]

[optional footer(s)]
```

## Commit Types

### Primary Types (MUST use these)

#### **feat**
- **Purpose**: New features for users
- **Impact**: Minor version bump in semantic versioning
- **Examples**: New components, API endpoints, user-facing functionality

#### **fix**
- **Purpose**: Bug fixes for users
- **Impact**: Patch version bump in semantic versioning  
- **Examples**: Fixing crashes, correcting logic errors, resolving UI issues

#### **BREAKING CHANGE**
- **Purpose**: Breaking changes that affect existing functionality
- **Impact**: Major version bump in semantic versioning
- **Format**: Include `BREAKING CHANGE:` in footer or use `!` after type/scope
- **Examples**: API changes, removed features, changed behavior

### Secondary Types (Recommended)

#### **build**
- **Purpose**: Changes to build system or external dependencies
- **Examples**: Package.json updates, build script changes, dependency updates

#### **chore**
- **Purpose**: Maintenance tasks that don't affect users
- **Examples**: Updating dev dependencies, cleaning up code, configuration changes

#### **ci**
- **Purpose**: Changes to CI/CD configuration and scripts
- **Examples**: GitHub Actions, build pipeline, deployment scripts

#### **docs**
- **Purpose**: Documentation changes only
- **Examples**: README updates, code comments, API documentation

#### **style**
- **Purpose**: Code style changes (formatting, whitespace, etc.)
- **Examples**: Prettier formatting, linting fixes, code organization

#### **refactor**
- **Purpose**: Code changes that neither fix bugs nor add features
- **Examples**: Code restructuring, performance improvements, simplification

#### **perf**
- **Purpose**: Performance improvements
- **Examples**: Optimization, caching, reducing bundle size

#### **test**
- **Purpose**: Adding or updating tests
- **Examples**: Unit tests, integration tests, test utilities

#### **revert**
- **Purpose**: Reverting previous commits
- **Format**: `revert: <reverted commit subject>`

## Scope Guidelines

### Project-Specific Scopes

#### **Frontend/UI Scopes**
- `ui`: User interface components
- `navigation`: Navigation and routing
- `theme`: Theming and styling
- `i18n`: Internationalization
- `accessibility`: Accessibility improvements

#### **Feature Scopes**
- `menu`: Menu functionality
- `store`: Store information features
- `contact`: Contact functionality
- `search`: Search functionality
- `favorites`: User favorites

#### **Technical Scopes**
- `api`: API integration
- `auth`: Authentication
- `cache`: Caching mechanisms
- `config`: Configuration changes
- `deps`: Dependencies
- `security`: Security improvements
- `performance`: Performance optimizations

#### **Platform Scopes**
- `ios`: iOS-specific changes
- `android`: Android-specific changes
- `web`: Web-specific changes

### Scope Rules
- Use lowercase for scopes
- Keep scopes concise and meaningful
- Use existing scopes when possible
- Create new scopes only when necessary
- Omit scope for global changes

## Description Guidelines

### Writing Rules
- Use imperative mood ("add" not "added" or "adds")
- Start with lowercase letter
- No period at the end
- Maximum 50 characters for the entire subject line
- Be concise but descriptive

### Good Examples
- `feat(menu): add coffee item filtering`
- `fix(navigation): resolve back button crash on Android`
- `docs: update installation instructions`
- `style(ui): format button components`

### Bad Examples
- `feat(menu): Added coffee item filtering` (not imperative)
- `fix(navigation): Resolves back button crash on Android.` (period at end)
- `updated docs` (missing type)
- `feat: implement new feature for the menu system that allows users to filter coffee items by category` (too long)

## Body Guidelines

### When to Include Body
- Explain the motivation for the change
- Contrast with previous behavior
- Provide additional context not clear from subject

### Body Rules
- Separate from subject with blank line
- Use imperative mood
- Wrap at 72 characters per line
- Explain what and why, not how

## Footer Guidelines

### Breaking Changes
```
BREAKING CHANGE: <description of breaking change>
```

### Issue References
```
Closes #123
Fixes #456
Refs #789
```

### Co-authored Commits
```
Co-authored-by: Name <email@example.com>
```

## Complete Examples

### Feature Addition
```
feat(menu): add coffee item filtering by category

Allow users to filter menu items by coffee type, enabling
easier navigation through the menu options.

Closes #45
```

### Bug Fix
```
fix(navigation): resolve back button crash on Android

The back button was causing app crashes when navigating from
menu to home screen on Android devices due to improper state
cleanup.

Fixes #123
```

### Breaking Change with !
```
feat(api)!: update menu API response format

Change menu item structure to include nutritional information
and allergen data.

BREAKING CHANGE: Menu API now returns items with nested 
nutrition object instead of flat structure.
```

### Documentation Update
```
docs: add Lingui setup instructions

Include step-by-step guide for configuring internationalization
with proper import patterns.
```

### Chore/Maintenance
```
chore(deps): update React Native to 0.79.5

Update to latest stable version for security patches
and performance improvements.
```

## Best Practices

### Commit Frequency
- Make atomic commits (one logical change per commit)
- Commit frequently with meaningful messages
- Avoid mixing unrelated changes in single commit

### Message Quality
- Write commits as if explaining to a teammate
- Focus on why the change was made, not just what changed
- Use present tense, imperative mood
- Be specific about what functionality is affected

### Team Consistency
- Agree on scope naming conventions
- Use consistent type selection
- Review commit messages in pull requests
- Use tools like commitlint for enforcement

### Automation Benefits
- Enables automatic changelog generation
- Supports semantic versioning automation
- Improves git history readability
- Facilitates release note creation

## Tools Integration

### Recommended Tools
- **commitlint**: Lint commit messages
- **husky**: Git hooks for commit validation
- **conventional-changelog**: Generate changelogs
- **semantic-release**: Automated releases

### IDE Integration
- Use commit message templates
- Configure git commit message format
- Enable commit message validation
- Use conventional commits extensions

This specification ensures consistent, meaningful commit history that supports automated tooling and clear project communication.